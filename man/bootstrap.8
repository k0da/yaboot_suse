.\" Hey Emacs! This file is -*- nroff -*- source.
.\" NewWorld section written by Ethan Benson OldWorld section taken
.\" from bootstrap(8) from the quik package.
.\"
.TH BOOTSTRAP 8 "28 April 2006" "Linux PowerPC" "System Manager's Manual"
.SH NAME
.B bootstrap
\- Disk boot process for Linux on PowerPC 
.SH DESCRIPTION
This man page describes the \fBbootstrap\fR process for both OldWorld and
NewWorld PowerMacs.  OldWorld PowerMacs all have a hardware MacOS ROM
and the case is beige in color, they have no on-board USB controller.
NewWorld PowerMacs do not have a hardware MacOS ROM, and are in colored,
translucent cases and have an on-board USB controller.
All G3s in colored cases are NewWorld, as are all G4s and later.  This man page is
divided into three sections, OLDWORLD, NEWWORLD, and IBM.  Please read the
section appropriate to your hardware.
.SH OLDWORLD
OldWorld PowerMacs can boot into Linux with the \fBBootX App\fR, the
\fBBootX Extension\fR or via \fBmiBoot\fR (which looks like a valid MacOS
System file to the built-in MacOS ROM). A more cumbersome method to boot
Linux is booting directly from the OpenFirmware prompt. The latter is
not supported by SuSE Linux.


.SH NEWWORLD
The process of booting so called NewWorld PowerMacs from disk starts
with OpenFirmware first attempting to execute the file specified in
the \fIboot-device\fR variable.  Unlike older versions of OpenFirmware
the NewWorld version will not attempt to read a boot sector.  By
default OpenFirmware attempts to load a file with HFS file type
\*(lqtbxi\*(rq in the \*(lqblessed\*(rq directory from each partition
of each disk OpenFirmware is aware of, the first partition/disk that
is found to be bootable is booted immediately. 

.BR lilo (8)
configures a \fBbootstrap\fR partition to pass all of OpenFirmware's
tests to determine if the partition is considered to be bootable or
not.  The boot script is given the HFS file type \*(lqtbxi\*(rq and a directory
named \fBsuseboot\fR is marked as \*(lqblessed\*(rq, the blessing is important
because OpenFirmware will immediately consider a partition unbootable
if no directory is marked as blessed (you can still manually execute a
loader such as \fByaboot\fR(8) with OpenFirmware even without a blessed
directory but it will not happen automatically).

The MacOS System Folder is always marked as blessed, this is required
for MacOS as well as OpenFirmware.  The MacOS System Folder also
contains its own boot loader which has the tbxi file type, this makes
installing \fByaboot\fR(8) onto a MacOS partition difficult.  The only way
to install \fByaboot\fR(8) on a MacOS boot partition is to modify
OpenFirmware to boot the CHRP script directly.  Given this it is
highly recommended that you create a dedicated \fBbootstrap\fR
partition for \fByaboot\fR(8).

Since OpenFirmware boots the first partition it finds to be bootable
it is important that the \fBbootstrap\fR partition be first on the
disk before any MacOS partition, otherwise MacOS will be booted
instead of a dual boot menu used with \fByaboot\fR(8).  

As stated earlier, the \fBbootstrap\fR partition contains a blessed directory
with the files required for booting. This setup is enough for OpenFirmware 
to consider the partition as bootable. But if MacOS mounts this partition,
it will inspect all the blesseded folders to see if they contain a real MacOS.
If the conditions are not met, the folder is unblessed and OpenFirmware will
not find it automatically any longer.
To make MacOS happy, \fBlilo\fR(8) will copy 2 files into the blessed folder to
let it look like a real MacOS. The empty \fBFinder\fR file with the correct
type/creator info, and a \fBSystem\fR file with a few entries in the resource
fork, and also the correct type/creator info. These 2 files come from
the BootX distribution, the System file is in fact miBoot. On NewWorld
PowerMacs, the whole purpose of this file is to fool MacOS. But it is never
exectuted by the firmware.

Some other distros do not or can not ship the Finder and System file
for unknown reasons. Instead, they recommend to create a small HFS partition
with type \*(lqApple_Bootstrap\*(rq. Since MacOS only mounts partitions
with type \*(lqApple_HFS\*(rq, the bootstrap partition remains untouched
and the blessing intact. But such a setup requires yet another partition
if you want to transfer files between MacOS and Linux, or if you want to
have kernel files on the boot partition. The latter is required for root 
filesystems not readable by yaboot (such as LVM, software RAID and jfs).

The \fBbootstrap\fR need not and should not be mounted anywhere on
your filesystem, especially not on top of /boot.  \fBYaboot\fR(8) is
able to load the kernels from the root partition so that is
where they should be kept.

OpenFirmware maintains a hierarchy of all the hardware it is aware of.
To access or specify a boot device you must use the OpenFirmware path.
For example: the path to a SCSI hard disk partition might look like
this: /pci@80000000/pci-bridge@d/ADPT,2930CU@2/@2:2 . The first part,
pci@80000000, shows that the target device is accessed through the PCI
bus.  The next part is the PCI bridge, the next is the name of the SCSI host
adapter installed (this name is provided by a BootROM on the card
itself), and after that is the SCSI ID number.  The colon delimits the
device from partition specification, so the last 2 means the second
partition of this device.  After the partition number we can specify
pathnames to files in two ways: lazy and absolute. The \*(lq,\*(rq delimits
the OpenFirmware path from the location of the bootfile.  \*(lq,\e\e:tbxi\*(rq
specifies the file that has a HFS file type of
\*(lqtbxi\*(rq in the blessed directory.  If there is not blessed
directory this will fail.  The second is to specify a absolute
pathname to an arbitrary file on the disk, example: 2:,yaboot would
load the file named \*(lqyaboot\*(rq in the root directory of the
filesystem.  It is possible to load files in subdirectories but
OpenFirmware does not always do this reliably, and any special
characters such as an embedded space must be expressed like %20 (for a
space) the directory separator used by OpenFirmware is the backslash
\e.  Example: 2:,\eboot\eyaboot. Determining the OpenFirmware path to
a given device is unfortunately not a trivial task.  If you are using
the built in ATA hard disk you can use the alias \*(lqhd:\*(rq.

\fBlilo\fR also includes a utility \fBshow_of_path.sh\fR(8) which can in most
cases find the OpenFirmware device path from a unix device node (ie
/dev/hda2) or file on your filesystem.

In addition to binary executables OpenFirmware can also execute a CHRP
script.  This is somewhat similar to a shell script.  A CHRP script is
useful to create simple boot menus, among other things.  CHRP scripts
are divided into sections in a way similar to HTML.  Here is a basic
example of a CHRP script used as a wrapper to \fByaboot\fR(8) (since
OpenFirmware will only load a file with type \*(lqtbxi\*(rq if it is a
CHRP script).
.IP
.nf
<CHRP-BOOT>
<COMPATIBLE>
MacRISC MacRISC4
</COMPATIBLE>
<DESCRIPTION>
PowerMac bootloader
</DESCRIPTION>
<BOOT-SCRIPT>
boot hd:,\\\\yaboot
</BOOT-SCRIPT>
</CHRP-BOOT>
.fi
.P
The \fICOMPATIBLE\fR section defines what machines this script is
compatible with, if the machine name encoded into the ROM does not
match one of these entries OpenFirmware will print out a lot of
incomprehensible junk and fail to load the script.  The
\fIDESCRIPTION\fR is ignored by OpenFirmware as far as I know.  The
\fIBOOT-SCRIPT\fR section is where arbitrary OpenFirmware Forth
commands may go.  They are executed the same way as you would enter
them on the OpenFirmware command line.  The entire script is wrapped
with the \fICHRP-BOOT\fR tags so that such a script may be attached as
a header to a binary file.  Much more complicated and elaborate CHRP
scripts are possible but that is beyond the scope of this document.

If you have G4 hardware then your OpenFirmware may already have a
graphical boot selector built in. This selector can be accessed by
holding down the Alt/option key when booting the machine.  You should see
a screen with buttons for each bootable partition. lilo(8) writes a badge icon,
the button with a penguin icon is your \fBbootstrap\fR partition.  If
you decide to use this built in selector you really do not need to use
a CHRP script that provides a boot menu. Thanks to Nicholas Humfrey
for creating the Badge icon.

.SH IBM
IBM hardware such as the RS/6000 and pSeries models require msdos style partition tables.
In order to boot from the disk they require a primary type 0x41 PReP Boot
\fBbootstrap\fR partition large enough to hold the bootloader
(typically \fByaboot\fR(8)).  The bootloader is copied onto the raw
partition as there is no filesystem.  This is done either with \fBdd\fR(1)
or \fBlilo\fR(8). This method requires a filesystem readable by yaboot to load
the config file /etc/yaboot.conf and the kernels specified in the config file.
\fByaboot\fR(8) can read filesystems located on primary and logical partitions.

If the Linux root filesystem is located on a LVM, software RAID or JFS filesystem,
\fBlilo\fR(8) will convert the 0x41 PReP Boot partition into a 0x6 FAT16 partition.
FAT16 can be read from the IBM firmware, if its located on a primary partition of type 0x6.
Then the yaboot binary, a config file and the kernel + initrd are copied onto this partition.

\fBImportant:\fR Note that IBM CHRP machines require a special yaboot binary with a
\fBPT_NOTE\fR entry in the ELF program header.
This entry contains some values for OpenFirmware variables like load-base, real-base etc.
If the entry is missing, the file is not accepted as bootfile. Unfortunately, if a bootfile
with PT_NOTE is booted on PowerMac, it will render it (almost) dead.
The only way to recover the Mac is to pull out the battery and the power cable for a day or two.

.SH BUGS
OpenFirmware
.SH AUTHORS
The NEWWORLD, and IBM sections of this man page
written by Ethan Benson <erbenson@alaska.net>
.SH SEE ALSO
.BR dd (1),
.BR show_of_path.sh (8),
.BR yaboot (8),
.BR lilo (8).
